// Code generated from parser/Pipe.g4 by ANTLR 4.8. DO NOT EDIT.

package parser

import (
	"fmt"
	"unicode"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import error
var _ = fmt.Printf
var _ = unicode.IsLetter

var serializedLexerAtn = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 2, 18, 144,
	8, 1, 4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7,
	9, 7, 4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12,
	4, 13, 9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 4,
	18, 9, 18, 4, 19, 9, 19, 4, 20, 9, 20, 4, 21, 9, 21, 4, 22, 9, 22, 4, 23,
	9, 23, 4, 24, 9, 24, 3, 2, 3, 2, 3, 3, 3, 3, 3, 4, 3, 4, 3, 5, 3, 5, 3,
	6, 3, 6, 3, 7, 3, 7, 3, 8, 3, 8, 3, 9, 3, 9, 3, 10, 3, 10, 5, 10, 68, 10,
	10, 3, 10, 3, 10, 5, 10, 72, 10, 10, 5, 10, 74, 10, 10, 3, 11, 5, 11, 77,
	10, 11, 3, 11, 3, 11, 3, 11, 5, 11, 82, 10, 11, 3, 11, 3, 11, 5, 11, 86,
	10, 11, 3, 12, 6, 12, 89, 10, 12, 13, 12, 14, 12, 90, 3, 13, 3, 13, 5,
	13, 95, 10, 13, 3, 14, 3, 14, 3, 15, 3, 15, 5, 15, 101, 10, 15, 3, 15,
	3, 15, 3, 16, 6, 16, 106, 10, 16, 13, 16, 14, 16, 107, 3, 17, 3, 17, 3,
	18, 3, 18, 5, 18, 114, 10, 18, 3, 19, 3, 19, 3, 19, 3, 19, 3, 19, 3, 20,
	3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 3, 21, 3, 21, 7, 21, 129, 10, 21, 12,
	21, 14, 21, 132, 11, 21, 3, 22, 3, 22, 3, 23, 3, 23, 3, 24, 6, 24, 139,
	10, 24, 13, 24, 14, 24, 140, 3, 24, 3, 24, 2, 2, 25, 3, 3, 5, 4, 7, 5,
	9, 6, 11, 7, 13, 8, 15, 9, 17, 10, 19, 11, 21, 12, 23, 2, 25, 2, 27, 2,
	29, 13, 31, 2, 33, 2, 35, 14, 37, 15, 39, 16, 41, 17, 43, 2, 45, 2, 47,
	18, 3, 2, 8, 3, 2, 63, 63, 3, 2, 51, 59, 3, 2, 41, 41, 4, 2, 67, 92, 99,
	124, 5, 2, 50, 59, 67, 92, 99, 124, 5, 2, 11, 12, 14, 15, 34, 34, 2, 149,
	2, 3, 3, 2, 2, 2, 2, 5, 3, 2, 2, 2, 2, 7, 3, 2, 2, 2, 2, 9, 3, 2, 2, 2,
	2, 11, 3, 2, 2, 2, 2, 13, 3, 2, 2, 2, 2, 15, 3, 2, 2, 2, 2, 17, 3, 2, 2,
	2, 2, 19, 3, 2, 2, 2, 2, 21, 3, 2, 2, 2, 2, 29, 3, 2, 2, 2, 2, 35, 3, 2,
	2, 2, 2, 37, 3, 2, 2, 2, 2, 39, 3, 2, 2, 2, 2, 41, 3, 2, 2, 2, 2, 47, 3,
	2, 2, 2, 3, 49, 3, 2, 2, 2, 5, 51, 3, 2, 2, 2, 7, 53, 3, 2, 2, 2, 9, 55,
	3, 2, 2, 2, 11, 57, 3, 2, 2, 2, 13, 59, 3, 2, 2, 2, 15, 61, 3, 2, 2, 2,
	17, 63, 3, 2, 2, 2, 19, 73, 3, 2, 2, 2, 21, 85, 3, 2, 2, 2, 23, 88, 3,
	2, 2, 2, 25, 94, 3, 2, 2, 2, 27, 96, 3, 2, 2, 2, 29, 98, 3, 2, 2, 2, 31,
	105, 3, 2, 2, 2, 33, 109, 3, 2, 2, 2, 35, 113, 3, 2, 2, 2, 37, 115, 3,
	2, 2, 2, 39, 120, 3, 2, 2, 2, 41, 126, 3, 2, 2, 2, 43, 133, 3, 2, 2, 2,
	45, 135, 3, 2, 2, 2, 47, 138, 3, 2, 2, 2, 49, 50, 7, 48, 2, 2, 50, 4, 3,
	2, 2, 2, 51, 52, 7, 42, 2, 2, 52, 6, 3, 2, 2, 2, 53, 54, 7, 46, 2, 2, 54,
	8, 3, 2, 2, 2, 55, 56, 7, 43, 2, 2, 56, 10, 3, 2, 2, 2, 57, 58, 7, 60,
	2, 2, 58, 12, 3, 2, 2, 2, 59, 60, 7, 93, 2, 2, 60, 14, 3, 2, 2, 2, 61,
	62, 7, 95, 2, 2, 62, 16, 3, 2, 2, 2, 63, 64, 9, 2, 2, 2, 64, 18, 3, 2,
	2, 2, 65, 74, 7, 50, 2, 2, 66, 68, 7, 47, 2, 2, 67, 66, 3, 2, 2, 2, 67,
	68, 3, 2, 2, 2, 68, 69, 3, 2, 2, 2, 69, 71, 5, 27, 14, 2, 70, 72, 5, 23,
	12, 2, 71, 70, 3, 2, 2, 2, 71, 72, 3, 2, 2, 2, 72, 74, 3, 2, 2, 2, 73,
	65, 3, 2, 2, 2, 73, 67, 3, 2, 2, 2, 74, 20, 3, 2, 2, 2, 75, 77, 7, 47,
	2, 2, 76, 75, 3, 2, 2, 2, 76, 77, 3, 2, 2, 2, 77, 78, 3, 2, 2, 2, 78, 79,
	5, 23, 12, 2, 79, 81, 7, 48, 2, 2, 80, 82, 5, 23, 12, 2, 81, 80, 3, 2,
	2, 2, 81, 82, 3, 2, 2, 2, 82, 86, 3, 2, 2, 2, 83, 84, 7, 48, 2, 2, 84,
	86, 5, 23, 12, 2, 85, 76, 3, 2, 2, 2, 85, 83, 3, 2, 2, 2, 86, 22, 3, 2,
	2, 2, 87, 89, 5, 25, 13, 2, 88, 87, 3, 2, 2, 2, 89, 90, 3, 2, 2, 2, 90,
	88, 3, 2, 2, 2, 90, 91, 3, 2, 2, 2, 91, 24, 3, 2, 2, 2, 92, 95, 7, 50,
	2, 2, 93, 95, 5, 27, 14, 2, 94, 92, 3, 2, 2, 2, 94, 93, 3, 2, 2, 2, 95,
	26, 3, 2, 2, 2, 96, 97, 9, 3, 2, 2, 97, 28, 3, 2, 2, 2, 98, 100, 7, 41,
	2, 2, 99, 101, 5, 31, 16, 2, 100, 99, 3, 2, 2, 2, 100, 101, 3, 2, 2, 2,
	101, 102, 3, 2, 2, 2, 102, 103, 7, 41, 2, 2, 103, 30, 3, 2, 2, 2, 104,
	106, 5, 33, 17, 2, 105, 104, 3, 2, 2, 2, 106, 107, 3, 2, 2, 2, 107, 105,
	3, 2, 2, 2, 107, 108, 3, 2, 2, 2, 108, 32, 3, 2, 2, 2, 109, 110, 10, 4,
	2, 2, 110, 34, 3, 2, 2, 2, 111, 114, 5, 37, 19, 2, 112, 114, 5, 39, 20,
	2, 113, 111, 3, 2, 2, 2, 113, 112, 3, 2, 2, 2, 114, 36, 3, 2, 2, 2, 115,
	116, 7, 118, 2, 2, 116, 117, 7, 116, 2, 2, 117, 118, 7, 119, 2, 2, 118,
	119, 7, 103, 2, 2, 119, 38, 3, 2, 2, 2, 120, 121, 7, 104, 2, 2, 121, 122,
	7, 99, 2, 2, 122, 123, 7, 110, 2, 2, 123, 124, 7, 117, 2, 2, 124, 125,
	7, 103, 2, 2, 125, 40, 3, 2, 2, 2, 126, 130, 5, 43, 22, 2, 127, 129, 5,
	45, 23, 2, 128, 127, 3, 2, 2, 2, 129, 132, 3, 2, 2, 2, 130, 128, 3, 2,
	2, 2, 130, 131, 3, 2, 2, 2, 131, 42, 3, 2, 2, 2, 132, 130, 3, 2, 2, 2,
	133, 134, 9, 5, 2, 2, 134, 44, 3, 2, 2, 2, 135, 136, 9, 6, 2, 2, 136, 46,
	3, 2, 2, 2, 137, 139, 9, 7, 2, 2, 138, 137, 3, 2, 2, 2, 139, 140, 3, 2,
	2, 2, 140, 138, 3, 2, 2, 2, 140, 141, 3, 2, 2, 2, 141, 142, 3, 2, 2, 2,
	142, 143, 8, 24, 2, 2, 143, 48, 3, 2, 2, 2, 16, 2, 67, 71, 73, 76, 81,
	85, 90, 94, 100, 107, 113, 130, 140, 3, 8, 2, 2,
}

var lexerDeserializer = antlr.NewATNDeserializer(nil)
var lexerAtn = lexerDeserializer.DeserializeFromUInt16(serializedLexerAtn)

var lexerChannelNames = []string{
	"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
}

var lexerModeNames = []string{
	"DEFAULT_MODE",
}

var lexerLiteralNames = []string{
	"", "'.'", "'('", "','", "')'", "':'", "'['", "']'", "", "", "", "", "",
	"'true'", "'false'",
}

var lexerSymbolicNames = []string{
	"", "", "", "", "", "", "", "", "Connect", "IntegerLiteral", "DecimalLiteral",
	"StringLiteral", "BooleanLiteral", "True", "False", "Identifier", "WS",
}

var lexerRuleNames = []string{
	"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "Connect", "IntegerLiteral",
	"DecimalLiteral", "Digits", "Digit", "NonZeroDigit", "StringLiteral", "StringCharacters",
	"StringCharacter", "BooleanLiteral", "True", "False", "Identifier", "Letter",
	"LetterOrDigit", "WS",
}

type PipeLexer struct {
	*antlr.BaseLexer
	channelNames []string
	modeNames    []string
	// TODO: EOF string
}

var lexerDecisionToDFA = make([]*antlr.DFA, len(lexerAtn.DecisionToState))

func init() {
	for index, ds := range lexerAtn.DecisionToState {
		lexerDecisionToDFA[index] = antlr.NewDFA(ds, index)
	}
}

func NewPipeLexer(input antlr.CharStream) *PipeLexer {

	l := new(PipeLexer)

	l.BaseLexer = antlr.NewBaseLexer(input)
	l.Interpreter = antlr.NewLexerATNSimulator(l, lexerAtn, lexerDecisionToDFA, antlr.NewPredictionContextCache())

	l.channelNames = lexerChannelNames
	l.modeNames = lexerModeNames
	l.RuleNames = lexerRuleNames
	l.LiteralNames = lexerLiteralNames
	l.SymbolicNames = lexerSymbolicNames
	l.GrammarFileName = "Pipe.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// PipeLexer tokens.
const (
	PipeLexerT__0           = 1
	PipeLexerT__1           = 2
	PipeLexerT__2           = 3
	PipeLexerT__3           = 4
	PipeLexerT__4           = 5
	PipeLexerT__5           = 6
	PipeLexerT__6           = 7
	PipeLexerConnect        = 8
	PipeLexerIntegerLiteral = 9
	PipeLexerDecimalLiteral = 10
	PipeLexerStringLiteral  = 11
	PipeLexerBooleanLiteral = 12
	PipeLexerTrue           = 13
	PipeLexerFalse          = 14
	PipeLexerIdentifier     = 15
	PipeLexerWS             = 16
)
