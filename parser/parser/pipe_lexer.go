// Code generated from parser\Pipe.g4 by ANTLR 4.8. DO NOT EDIT.

package parser

import (
	"fmt"
	"unicode"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import error
var _ = fmt.Printf
var _ = unicode.IsLetter

var serializedLexerAtn = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 2, 15, 142,
	8, 1, 4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7,
	9, 7, 4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12,
	4, 13, 9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 4,
	18, 9, 18, 4, 19, 9, 19, 4, 20, 9, 20, 4, 21, 9, 21, 4, 22, 9, 22, 4, 23,
	9, 23, 3, 2, 3, 2, 3, 3, 3, 3, 3, 4, 3, 4, 3, 5, 3, 5, 3, 6, 3, 6, 3, 7,
	3, 7, 3, 8, 3, 8, 5, 8, 62, 10, 8, 3, 9, 3, 9, 5, 9, 66, 10, 9, 3, 9, 3,
	9, 5, 9, 70, 10, 9, 5, 9, 72, 10, 9, 3, 10, 5, 10, 75, 10, 10, 3, 10, 3,
	10, 3, 10, 5, 10, 80, 10, 10, 3, 10, 3, 10, 5, 10, 84, 10, 10, 3, 11, 6,
	11, 87, 10, 11, 13, 11, 14, 11, 88, 3, 12, 3, 12, 5, 12, 93, 10, 12, 3,
	13, 3, 13, 3, 14, 3, 14, 5, 14, 99, 10, 14, 3, 14, 3, 14, 3, 15, 6, 15,
	104, 10, 15, 13, 15, 14, 15, 105, 3, 16, 3, 16, 3, 17, 3, 17, 5, 17, 112,
	10, 17, 3, 18, 3, 18, 3, 18, 3, 18, 3, 18, 3, 19, 3, 19, 3, 19, 3, 19,
	3, 19, 3, 19, 3, 20, 3, 20, 7, 20, 127, 10, 20, 12, 20, 14, 20, 130, 11,
	20, 3, 21, 3, 21, 3, 22, 3, 22, 3, 23, 6, 23, 137, 10, 23, 13, 23, 14,
	23, 138, 3, 23, 3, 23, 2, 2, 24, 3, 3, 5, 4, 7, 5, 9, 6, 11, 7, 13, 8,
	15, 9, 17, 2, 19, 2, 21, 2, 23, 2, 25, 2, 27, 10, 29, 2, 31, 2, 33, 11,
	35, 12, 37, 13, 39, 14, 41, 2, 43, 2, 45, 15, 3, 2, 8, 3, 2, 63, 63, 3,
	2, 51, 59, 3, 2, 36, 36, 4, 2, 67, 92, 99, 124, 5, 2, 50, 59, 67, 92, 99,
	124, 5, 2, 11, 12, 14, 15, 34, 34, 2, 146, 2, 3, 3, 2, 2, 2, 2, 5, 3, 2,
	2, 2, 2, 7, 3, 2, 2, 2, 2, 9, 3, 2, 2, 2, 2, 11, 3, 2, 2, 2, 2, 13, 3,
	2, 2, 2, 2, 15, 3, 2, 2, 2, 2, 27, 3, 2, 2, 2, 2, 33, 3, 2, 2, 2, 2, 35,
	3, 2, 2, 2, 2, 37, 3, 2, 2, 2, 2, 39, 3, 2, 2, 2, 2, 45, 3, 2, 2, 2, 3,
	47, 3, 2, 2, 2, 5, 49, 3, 2, 2, 2, 7, 51, 3, 2, 2, 2, 9, 53, 3, 2, 2, 2,
	11, 55, 3, 2, 2, 2, 13, 57, 3, 2, 2, 2, 15, 61, 3, 2, 2, 2, 17, 71, 3,
	2, 2, 2, 19, 83, 3, 2, 2, 2, 21, 86, 3, 2, 2, 2, 23, 92, 3, 2, 2, 2, 25,
	94, 3, 2, 2, 2, 27, 96, 3, 2, 2, 2, 29, 103, 3, 2, 2, 2, 31, 107, 3, 2,
	2, 2, 33, 111, 3, 2, 2, 2, 35, 113, 3, 2, 2, 2, 37, 118, 3, 2, 2, 2, 39,
	124, 3, 2, 2, 2, 41, 131, 3, 2, 2, 2, 43, 133, 3, 2, 2, 2, 45, 136, 3,
	2, 2, 2, 47, 48, 7, 48, 2, 2, 48, 4, 3, 2, 2, 2, 49, 50, 7, 42, 2, 2, 50,
	6, 3, 2, 2, 2, 51, 52, 7, 46, 2, 2, 52, 8, 3, 2, 2, 2, 53, 54, 7, 43, 2,
	2, 54, 10, 3, 2, 2, 2, 55, 56, 7, 60, 2, 2, 56, 12, 3, 2, 2, 2, 57, 58,
	9, 2, 2, 2, 58, 14, 3, 2, 2, 2, 59, 62, 5, 17, 9, 2, 60, 62, 5, 19, 10,
	2, 61, 59, 3, 2, 2, 2, 61, 60, 3, 2, 2, 2, 62, 16, 3, 2, 2, 2, 63, 72,
	7, 50, 2, 2, 64, 66, 7, 47, 2, 2, 65, 64, 3, 2, 2, 2, 65, 66, 3, 2, 2,
	2, 66, 67, 3, 2, 2, 2, 67, 69, 5, 25, 13, 2, 68, 70, 5, 21, 11, 2, 69,
	68, 3, 2, 2, 2, 69, 70, 3, 2, 2, 2, 70, 72, 3, 2, 2, 2, 71, 63, 3, 2, 2,
	2, 71, 65, 3, 2, 2, 2, 72, 18, 3, 2, 2, 2, 73, 75, 7, 47, 2, 2, 74, 73,
	3, 2, 2, 2, 74, 75, 3, 2, 2, 2, 75, 76, 3, 2, 2, 2, 76, 77, 5, 21, 11,
	2, 77, 79, 7, 48, 2, 2, 78, 80, 5, 21, 11, 2, 79, 78, 3, 2, 2, 2, 79, 80,
	3, 2, 2, 2, 80, 84, 3, 2, 2, 2, 81, 82, 7, 48, 2, 2, 82, 84, 5, 21, 11,
	2, 83, 74, 3, 2, 2, 2, 83, 81, 3, 2, 2, 2, 84, 20, 3, 2, 2, 2, 85, 87,
	5, 23, 12, 2, 86, 85, 3, 2, 2, 2, 87, 88, 3, 2, 2, 2, 88, 86, 3, 2, 2,
	2, 88, 89, 3, 2, 2, 2, 89, 22, 3, 2, 2, 2, 90, 93, 7, 50, 2, 2, 91, 93,
	5, 25, 13, 2, 92, 90, 3, 2, 2, 2, 92, 91, 3, 2, 2, 2, 93, 24, 3, 2, 2,
	2, 94, 95, 9, 3, 2, 2, 95, 26, 3, 2, 2, 2, 96, 98, 7, 36, 2, 2, 97, 99,
	5, 29, 15, 2, 98, 97, 3, 2, 2, 2, 98, 99, 3, 2, 2, 2, 99, 100, 3, 2, 2,
	2, 100, 101, 7, 36, 2, 2, 101, 28, 3, 2, 2, 2, 102, 104, 5, 31, 16, 2,
	103, 102, 3, 2, 2, 2, 104, 105, 3, 2, 2, 2, 105, 103, 3, 2, 2, 2, 105,
	106, 3, 2, 2, 2, 106, 30, 3, 2, 2, 2, 107, 108, 10, 4, 2, 2, 108, 32, 3,
	2, 2, 2, 109, 112, 5, 35, 18, 2, 110, 112, 5, 37, 19, 2, 111, 109, 3, 2,
	2, 2, 111, 110, 3, 2, 2, 2, 112, 34, 3, 2, 2, 2, 113, 114, 7, 118, 2, 2,
	114, 115, 7, 116, 2, 2, 115, 116, 7, 119, 2, 2, 116, 117, 7, 103, 2, 2,
	117, 36, 3, 2, 2, 2, 118, 119, 7, 104, 2, 2, 119, 120, 7, 99, 2, 2, 120,
	121, 7, 110, 2, 2, 121, 122, 7, 117, 2, 2, 122, 123, 7, 103, 2, 2, 123,
	38, 3, 2, 2, 2, 124, 128, 5, 41, 21, 2, 125, 127, 5, 43, 22, 2, 126, 125,
	3, 2, 2, 2, 127, 130, 3, 2, 2, 2, 128, 126, 3, 2, 2, 2, 128, 129, 3, 2,
	2, 2, 129, 40, 3, 2, 2, 2, 130, 128, 3, 2, 2, 2, 131, 132, 9, 5, 2, 2,
	132, 42, 3, 2, 2, 2, 133, 134, 9, 6, 2, 2, 134, 44, 3, 2, 2, 2, 135, 137,
	9, 7, 2, 2, 136, 135, 3, 2, 2, 2, 137, 138, 3, 2, 2, 2, 138, 136, 3, 2,
	2, 2, 138, 139, 3, 2, 2, 2, 139, 140, 3, 2, 2, 2, 140, 141, 8, 23, 2, 2,
	141, 46, 3, 2, 2, 2, 17, 2, 61, 65, 69, 71, 74, 79, 83, 88, 92, 98, 105,
	111, 128, 138, 3, 8, 2, 2,
}

var lexerDeserializer = antlr.NewATNDeserializer(nil)
var lexerAtn = lexerDeserializer.DeserializeFromUInt16(serializedLexerAtn)

var lexerChannelNames = []string{
	"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
}

var lexerModeNames = []string{
	"DEFAULT_MODE",
}

var lexerLiteralNames = []string{
	"", "'.'", "'('", "','", "')'", "':'", "", "", "", "", "'true'", "'false'",
}

var lexerSymbolicNames = []string{
	"", "", "", "", "", "", "CommandSeparator", "NumberLiteral", "StringLiteral",
	"BooleanLiteral", "True", "False", "Identifier", "WS",
}

var lexerRuleNames = []string{
	"T__0", "T__1", "T__2", "T__3", "T__4", "CommandSeparator", "NumberLiteral",
	"IntegerLiteral", "FloatingPointLiteral", "Digits", "Digit", "NonZeroDigit",
	"StringLiteral", "StringCharacters", "StringCharacter", "BooleanLiteral",
	"True", "False", "Identifier", "Letter", "LetterOrDigit", "WS",
}

type PipeLexer struct {
	*antlr.BaseLexer
	channelNames []string
	modeNames    []string
	// TODO: EOF string
}

var lexerDecisionToDFA = make([]*antlr.DFA, len(lexerAtn.DecisionToState))

func init() {
	for index, ds := range lexerAtn.DecisionToState {
		lexerDecisionToDFA[index] = antlr.NewDFA(ds, index)
	}
}

func NewPipeLexer(input antlr.CharStream) *PipeLexer {

	l := new(PipeLexer)

	l.BaseLexer = antlr.NewBaseLexer(input)
	l.Interpreter = antlr.NewLexerATNSimulator(l, lexerAtn, lexerDecisionToDFA, antlr.NewPredictionContextCache())

	l.channelNames = lexerChannelNames
	l.modeNames = lexerModeNames
	l.RuleNames = lexerRuleNames
	l.LiteralNames = lexerLiteralNames
	l.SymbolicNames = lexerSymbolicNames
	l.GrammarFileName = "Pipe.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// PipeLexer tokens.
const (
	PipeLexerT__0             = 1
	PipeLexerT__1             = 2
	PipeLexerT__2             = 3
	PipeLexerT__3             = 4
	PipeLexerT__4             = 5
	PipeLexerCommandSeparator = 6
	PipeLexerNumberLiteral    = 7
	PipeLexerStringLiteral    = 8
	PipeLexerBooleanLiteral   = 9
	PipeLexerTrue             = 10
	PipeLexerFalse            = 11
	PipeLexerIdentifier       = 12
	PipeLexerWS               = 13
)
